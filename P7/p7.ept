(*
    until => executa o estado em que estÃ¡ e transiciona para outro estado
    unless => transiciona para outro estado e executa o novo estado
*)

node waterBox(n1, n2, n3, n4, n5: bool) returns (statee: int)
let
	automaton
		state Empty0 do
			statee = 0;
		unless n1 then Critical1
		state Critical1 do
			statee = 10;
		unless n2 then Critical2
			| not n1 then Empty0
		state Critical2 do
			statee = 20;
		unless n3 then NeedWater3
			| not n2 then Critical1
		state NeedWater3 do
			statee = 30;
		unless n4 then NeedWater4
			| not n3 then Critical2
		state NeedWater4 do
			statee = 41;
		unless n5 then Full5
			| not n4 then NeedWater3
		state Full5 do
			statee = 50;
		unless not n5 then NoNeedWater4
		state NoNeedWater4 do
			statee = 42;
		unless n5 then Full5
			| not n4 then NeedWater3
	end
tel

node deviceLed(c: bool) returns (statee: bool)
let
	automaton
		state Off do
			statee = false;
		unless c then On
		state On do
			statee = true;
		unless not c then Off
	end
tel

node wellPump(maintenance, c: bool) returns (statee: int)
let
	automaton
		state Off do
			statee = 0;
		unless maintenance then Maintenance
			| c then On
		state On do
			statee = 1;
		unless maintenance then Maintenance
			| not c then Off
		state Maintenance do
			statee = 2;
		unless not maintenance then Off
	end
tel

node main(n1_wBox, n2_wBox, n3_wBox, n4_wBox, n5_wBox, maint_wPump: bool) returns (state_wBox, state_wellPump: int; state_led_wBox1, state_led_wBox2, state_led_wBox3, state_led_wBox4, state_led_wBox5, state_led_maint_wPump: bool)
	contract
		var rule1, rule2, rule3, rule4, rule5, rule6, rule7: bool;
	let
		rule1 = not (state_wBox < 10) or not state_led_wBox1;
		rule2 = not (state_wBox < 20) or not state_led_wBox2;
		rule3 = not (state_wBox < 30) or not state_led_wBox3;
		rule4 = not (state_wBox < 40) or not state_led_wBox4;
		rule5 = not (state_wBox < 50) or not state_led_wBox5;
		rule6 = not (state_wellPump < 2) or not state_led_maint_wPump;
		rule7 = not (state_wBox > 41) or not (state_wellPump = 1);
	tel

	enforce (rule1 & rule2 & rule3 & rule4 & rule5 & rule6 & rule7)
	with (c_led_wBox1, c_led_wBox2, c_led_wBox3, c_led_wBox4, c_led_wBox5, c_wPump, c_led_maint_wPump: bool)
let
    state_wBox = inlined waterBox(n1_wBox, n2_wBox, n3_wBox, n4_wBox, n5_wBox);
    state_led_wBox1 = inlined deviceLed(c_led_wBox1);
    state_led_wBox2 = inlined deviceLed(c_led_wBox2);
    state_led_wBox3 = inlined deviceLed(c_led_wBox3);
    state_led_wBox4 = inlined deviceLed(c_led_wBox4);
    state_led_wBox5 = inlined deviceLed(c_led_wBox5);
    state_wellPump = inlined wellPump(maint_wPump, c_wPump);
    state_led_maint_wPump = inlined deviceLed(c_led_maint_wPump);
tel